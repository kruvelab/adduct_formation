m <- parse.smiles(SMILES)[[1]]
matrix_with_bond_count <- get.connection.matrix(m)
#matrix <- get.adjacency.matrix(m)
atoms <- get.atoms(m)
names_of_atoms <- tibble(atoms = character())
for (i in 1:length(atoms)) {
names_of_atoms <- names_of_atoms %>%
add_row(atoms = get.symbol(atoms[[i]]))
}
graph = igraph::graph_from_adjacency_matrix(matrix_with_bond_count)
graph1 = set.vertex.attribute(graph, "name", value=as.character(1:length(atoms)))
#added substructure ----
SMILES2 <- "C(=O)O"
m2 <- parse.smiles(SMILES2)[[1]]
matrix_with_bond_count2 <- get.connection.matrix(m2)
atoms2 <- get.atoms(m2)
names_of_atoms2 <- tibble(atoms2 = character())
for (i in 1:length(atoms2)) {
names_of_atoms2 <- names_of_atoms2 %>%
add_row(atoms2 = get.symbol(atoms2[[i]]))
}
#matrix2 <- get.adjacency.matrix(m2)
graph2 = igraph::graph_from_adjacency_matrix(matrix_with_bond_count2)
graph2 = set.vertex.attribute(graph2, "name", value=as.character((length(atoms)+1):(length(atoms)+length(atoms2))))
graph <- graph %>%
add_vertices(3)
union_graph = igraph::union(graph1, graph2)
plot(union_graph)
union_graph_matrix = as.matrix(as_adjacency_matrix(union_graph))
union_graph = graph_from_adjacency_matrix(union_graph_matrix)
x = atoms_available_for_connection(m, matrix_with_bond_count)
y = atoms_available_for_connection(m2, matrix_with_bond_count2)
connections = c(sample(x, size = 1),
sample(y, size = 1)+length(atoms))
union_graph = union_graph %>%
add.edges(connections)
plot(union_graph)
atoms_available_for_connection = function(m, matrix_with_bond_count) {
atoms <- get.atoms(m)
names_of_atoms <- tibble(atoms = character())
for (i in 1:length(atoms)) {
names_of_atoms <- names_of_atoms %>%
add_row(atoms = get.symbol(atoms[[i]]))
}
names_of_atoms = names_of_atoms %>%
add_column(bond_count = colSums(matrix_with_bond_count))
names_of_atoms = names_of_atoms %>%
mutate(is_available_for_connection = case_when(
atoms == "O" & bond_count < 2 ~ 1,
atoms == "C" & bond_count < 4 ~ 1,
TRUE ~ 0
))
return(which(names_of_atoms$is_available_for_connection == 1))
}
#base structure----
SMILES <- "c1cc(O)ccc1(O)"
m <- parse.smiles(SMILES)[[1]]
matrix_with_bond_count <- get.connection.matrix(m)
#matrix <- get.adjacency.matrix(m)
atoms <- get.atoms(m)
names_of_atoms <- tibble(atoms = character())
for (i in 1:length(atoms)) {
names_of_atoms <- names_of_atoms %>%
add_row(atoms = get.symbol(atoms[[i]]))
}
graph = igraph::graph_from_adjacency_matrix(matrix_with_bond_count)
graph1 = set.vertex.attribute(graph, "name", value=as.character(1:length(atoms)))
#added substructure ----
SMILES2 <- "C(=O)O"
m2 <- parse.smiles(SMILES2)[[1]]
matrix_with_bond_count2 <- get.connection.matrix(m2)
atoms2 <- get.atoms(m2)
names_of_atoms2 <- tibble(atoms2 = character())
for (i in 1:length(atoms2)) {
names_of_atoms2 <- names_of_atoms2 %>%
add_row(atoms2 = get.symbol(atoms2[[i]]))
}
#matrix2 <- get.adjacency.matrix(m2)
graph2 = igraph::graph_from_adjacency_matrix(matrix_with_bond_count2)
graph2 = set.vertex.attribute(graph2, "name", value=as.character((length(atoms)+1):(length(atoms)+length(atoms2))))
graph <- graph %>%
add_vertices(3)
union_graph = igraph::union(graph1, graph2)
plot(union_graph)
union_graph_matrix = as.matrix(as_adjacency_matrix(union_graph))
union_graph = graph_from_adjacency_matrix(union_graph_matrix)
x = atoms_available_for_connection(m, matrix_with_bond_count)
y = atoms_available_for_connection(m2, matrix_with_bond_count2)
connections = c(sample(x, size = 1),
sample(y, size = 1)+length(atoms))
union_graph = union_graph %>%
add.edges(connections)
plot(union_graph)
View(names_of_atoms)
library(fingerprint)
library(rcdk)
library(fingerprint)
sp <- get.smiles.parser()
smiles <- c('CCC', 'CCN', 'CCN(C)(C)', 'c1ccccc1Cc1ccccc1','C1CCC1CC(CN(C)(C))CC(=O)CC')
mols <- parse.smiles(smiles)
fp <- get.fingerprint(mols[[1]])
fps <- lapply(mols, get.fingerprint, type='maccs')
fp.to.matrix(fp)
fp.to.matrix(fps)
as.data.frame(fp.to.matrix(fps))
## get Substructure count fingerprint for user defined fragments
mol1 <- parse.smiles("c1ccccc1CCC")[[1]]
smarts <- c("c1ccccc1", "[CX4H3][#6]", "[CX2]#[CX2]")
fps <- get.fingerprint(mol1, type='substructure', fp.mode='count',
substructure.pattern=smarts)
as.data.frame(fp.to.matrix(fps))
fps
source("https://raw.githubusercontent.com/rickhelmus/patRoon/master/install_patRoon.R")
installPatRoon()
library(devtools)
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
remove.packages("Rcpp", lib="~/R/win-library/4.0")
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
remove.packages("RcppArmadillo", lib="~/R/win-library/4.0")
remove.packages("RcppEigen", lib="~/R/win-library/4.0")
library(devtools)
install_github("cbroeckl/RAMClustR", build_vignettes = TRUE, dependencies = TRUE)
remove.packages("fansi", lib="~/R/win-library/4.0")
source("https://raw.githubusercontent.com/rickhelmus/patRoon/master/install_patRoon.R")
installPatRoon()
install.packages(c("BiocManager", "remotes"))
BiocManager::install("CAMERA")
library(rlang)
install.packages(c("BiocManager", "remotes"))
BiocManager::install("CAMERA")
install.packages(c("BiocManager", "remotes"))
BiocManager::install("CAMERA")
# needed for RAMClustR for componentization
remotes::install_github("cbroeckl/RAMClustR")
# only needed for Bruker DataAnalysis integration
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
# only when using the R interface (not recommended by default)
remotes::install_github("c-ruttkies/MetFragR/metfRag")
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/sirius-win64-3.5.1") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "/usr/local/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "~/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "~/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "~/PubChemLite_14Jan2020_tier0.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.0.0") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
# optional, data for tutorial
install.packages("patRoonData", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
# optional, data for tutorial
install.packages("patRoonData", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64/sirius-win64-4.4.29") # location where SIRIUS was extracted
patRoon::verifyDependencies()
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64/sirius-win64-4.4.29") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Program Files/sirius-gui") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
library(patRoon)
a = 1:20
rev.default(a)
a = 20:1
20 %% 2
rm(1:4)
remove(1:4)
within(a, rm(3))
within(a, 3
)
a[c(2)] <- NULL
a[c(2,3)] <- NULL
a[-c(2,3)]
install.packages("rlist")
remove(a, 2)
list.remove(a, 2)
library(tidyverse)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(COC-1~[#8])C-1'
matches(query, mols)
install.packages("lsa")
a = c(1, 0, 0, 1)
b = c(1, 0, 1, 0)
lsa::cosine(a, b)
b = c(1, 0, 1, 0, 0)
a = c(1, 0, 0, 1, 0)
b = c(1, 0, 1, 0, 0)
lsa::cosine(a, b)
a = c(1, 0, 0, 1, 1)
b = c(1, 0, 1, 0, 0)
lsa::cosine(a, b)
library(tidyverse)
tibble(bind_rows(a, b))
bind_rows(a, b)
SMILES = "Clc1ccc(c(Cl)c1)C(OCC=C)Cn2ccnc2"
ion = "[M+H]+"
command_part1 = "docker run --rm=true -v "
check0 = '"'
check = "%"
command_part12 = "cd"
check2 = "%"
command_part13 = ":/cfmid/public/\" -i wishartlab/cfmid:latest sh -c \"cd /cfmid/public/; cfm-predict \'"
command_part2 = "\' 0.001 /trained_models_cfmid4.0/[M+H]+/param_output.log /trained_models_cfmid4.0/"
command_part3 = "/param_config.txt 1 "
command_part4 = ".txt\""
command_final = str_c(command_part1, check0, check, command_part12, check2, command_part13, SMILES, command_part2, ion, command_part3, "test", command_part4)
library(tidyverse)
command_final = str_c(command_part1, check0, check, command_part12, check2, command_part13, SMILES, command_part2, ion, command_part3, "test", command_part4)
command_final
writeLines(c("Hello","World"), fileConn)
writeLines(c("Hello","World")
)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'OH'
matches(query, mols)
query <- '(O)'
matches(query, mols)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '(O)'
matches(query, mols)
query <- '[OH]'
matches(query, mols)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
library(tidyverse)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
View(test_data)
test_data = test_data %>%
mutate(mols <- parse.smiles(SMILES))
View(test_data)
test_data = test_data %>%
mutate(mols <- parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = test_data %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols)) %>%
ungroup()
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES) %>%
ungroup()
,
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES) %>%
ungroup()
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES)) %>%
ungroup()
includes_OH = matches(query, test_data$mols))
includes_OH = matches(query, test_data$mols)
test_data$mols
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
mols
matches(query, mols)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
matches(query, mols)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(=O)O'
matches(query, mols)
rcdk::matches(query, mols)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(=O)O'
rcdk::matches(query, mols)
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = rcdk::matches(query, mols)) %>%
ungroup()
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = rcdk::matches(query, mols)) %>%
ungroup()
View(test_data)
library(rcdk)
library(tidyverse)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
group_by(SMILES) %>%
mutate(includes_OH = rcdk::matches(query, parse.smiles(SMILES))) %>%
ungroup()
View(test_data)
library(tidyverse)
data = read_delim("Predicted_adduct_formation_training_set.csv",
delim = ",")
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/GitHub/adduct_formation/data/training")
data = read_delim("Predicted_adduct_formation_training_set.csv",
delim = ",")
View(data)
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/GitHub/adduct_formation")
classifier_svmPoly = readRDS("models/classifier_svmPoly.rds")
data = read_delim("data/training/Predicted_adduct_formation_training_set.csv",
delim = ",")
data = data %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data, type = "prob")[,2]))
data = data %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data, type = "prob")[,2])
View(data)
data = data %>%
select(PubChemCID, M_Na, Lab)
library(webchem)
data = data %>%
mutate(SMILES = pc_prop(get_cid(smiles, from = "smiles", match = "first")$cid, properties = "CanonicalSMILES")$CanonicalSMILES)
data = data %>%
group_by(PubChemCID) %>%
mutate(SMILES = pc_prop(PubChemCID, properties = "CanonicalSMILES")$CanonicalSMILES) %>%
ungroup()
data = data %>%
group_by(PubChemCID) %>%
mutate(SMILES = pc_prop(as.character(PubChemCID), properties = "CanonicalSMILES")$CanonicalSMILES) %>%
ungroup()
pc_prop(86, properties = "CanonicalSMILES")
pc_prop(86)
pc_prop(5564)
comp <- c("Triclosan", "Aspirin")
cids <- get_cid(comp)
pc_prop(cids$cid, properties = c("MolecularFormula", "MolecularWeight",
"CanonicalSMILES"))
validation_SMILES = read_delim("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/PubChem/ac8b04567_si_002.csv",
delim = ",")
validation_predicted = read_delim("data/validation/Predicted_adduct_formation_validation_set.csv",
delim = ",")
View(validation_predicted)
View(validation_SMILES)
validation_predicted = validation_predicted %>%
select(Name, PubChemCID, ExactMass, SMILES, M_Na_pred_prob)
validation_SMILES = read_delim("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/PubChem/ac8b04567_si_002.csv",
delim = ",")
validation_predicted %>%
left_join(validation_SMILES)
validation_predicted %>%
left_join(validation_SMILES, by = c("Name"))
data_fingerprints = read_delim("data/training/PubChem_fingerprints_Bond_properties.csv",
delim = ",")
View(data_fingerprints)
View(data)
data %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES))
data = data %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES)) %>%
select(PubChemCID, SMILES, Lab, M_Na)
write_delim(data,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_training_set.csv",
delim = ",")
data_test_set = read_delim("data/training/Predicted_adduct_formation_test_set.csv",
delim = ",")
View(data_test_set)
data_test_set = read_delim("data/training/Predicted_adduct_formation_test_set.csv",
delim = ",")
data_test_set = data_test_set %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data_test_set, type = "prob")[,2])
data_test_set = data_test_set %>%
select(PubChemCID, M_Na, Lab)
data_test_set = data_test_set %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES)) %>%
select(PubChemCID, SMILES, Lab, M_Na)
View(data_test_set)
View(data)
data_test_set = read_delim("data/training/Predicted_adduct_formation_test_set.csv",
delim = ",")
data_test_set = data_test_set %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data_test_set, type = "prob")[,2])
data_test_set = data_test_set %>%
select(PubChemCID, M_Na, Lab)
data_test_set %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES))
View(data_fingerprints)
View(data_test_set)
data_test_set = data_test_set %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES) %>%
unique()) %>%
select(PubChemCID, SMILES, Lab, M_Na)
classifier_svmPoly = readRDS("models/classifier_svmPoly.rds")
data = read_delim("data/training/Predicted_adduct_formation_training_set.csv",
delim = ",")
data_fingerprints = read_delim("data/training/PubChem_fingerprints_Bond_properties.csv",
delim = ",")
data = data %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data, type = "prob")[,2])
data = data %>%
select(PubChemCID, M_Na, Lab)
data = data %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES) %>%
unique()) %>%
select(PubChemCID, SMILES, Lab, M_Na)
write_delim(data,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_training_set.csv",
delim = ",")
data_test_set = read_delim("data/training/Predicted_adduct_formation_test_set.csv",
delim = ",")
data_test_set = data_test_set %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data_test_set, type = "prob")[,2])
data_test_set = data_test_set %>%
select(PubChemCID, M_Na, Lab)
data_test_set = data_test_set %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES) %>%
unique()) %>%
select(PubChemCID, SMILES, Lab, M_Na)
write_delim(data,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_test_set.csv",
delim = ",")
validation_predicted = read_delim("data/validation/Predicted_adduct_formation_validation_set.csv",
delim = ",")
View(validation_predicted)
validation_predicted = validation_predicted %>%
select(Name, PubChemCID, SMILES, M_Na_pred_prob) %>%
rename(M_Na = M_Na_pred_prob)
write_delim(data,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_validation_set.csv",
delim = ",")
library(tidyverse)
library(webchem)
classifier_svmPoly = readRDS("models/classifier_svmPoly.rds")
data = read_delim("data/training/Predicted_adduct_formation_training_set.csv",
delim = ",")
data_fingerprints = read_delim("data/training/PubChem_fingerprints_Bond_properties.csv",
delim = ",")
data = data %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data, type = "prob")[,2])
data = data %>%
select(PubChemCID, M_Na, Lab)
data = data %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES) %>%
unique()) %>%
select(PubChemCID, SMILES, Lab, M_Na)
write_delim(data,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_training_set.csv",
delim = ",")
data_test_set = read_delim("data/training/Predicted_adduct_formation_test_set.csv",
delim = ",")
data_test_set = data_test_set %>%
mutate(M_Na =predict(classifier_svmPoly, newdata = data_test_set, type = "prob")[,2])
data_test_set = data_test_set %>%
select(PubChemCID, M_Na, Lab)
data_test_set = data_test_set %>%
left_join(data_fingerprints %>%
select(PubChemCID, SMILES) %>%
unique()) %>%
select(PubChemCID, SMILES, Lab, M_Na)
write_delim(data_test_set,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_test_set.csv",
delim = ",")
validation_predicted = read_delim("data/validation/Predicted_adduct_formation_validation_set.csv",
delim = ",")
validation_predicted = validation_predicted %>%
select(Name, PubChemCID, SMILES, M_Na_pred_prob) %>%
rename(M_Na = M_Na_pred_prob)
write_delim(validation_predicted,
"C:/Users/annel/OneDrive - Kruvelab/Kruvelab/Research/Supervision/old/Riccardo/data for paper 2021-11-30/SI_predicted_adduct_formation_validation_set.csv",
delim = ",")
