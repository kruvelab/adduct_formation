M_Na_pred_svmPoly = case_when(
M_Na_pred_svmPoly == "yes" ~ 1,
TRUE ~ 0
))
data_test_pred <- data_test %>%
select(PubChemCID, Lab, M_Na) %>%
unique() %>%
left_join(fingerprints) %>%
na.omit() %>%
unique()
data_test_pred <- data_test_pred %>%
mutate(M_Na_pred_svmLinear = predict(classifier_svmlinear, newdata = data_test_pred),
M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_test_pred),
M_Na_pred_RRF = predict(classifier_RRF, newdata = data_test_pred),
M_Na_pred_ada = predict(classifier_ada, newdata = data_test_pred),
M_Na_pred_DT = predict(classifier_DT, newdata = data_test_pred),
M_Na_pred_knn = predict(classifier_knn, newdata = data_test_pred),
M_Na_pred_naive_bayes = predict(classifier_naive_bayes, newdata = data_test_pred))
data_test_pred = data_test_pred %>%
mutate(M_Na_pred_svmLinear = case_when(
M_Na_pred_svmLinear == "yes" ~ 1,
TRUE ~ 0
),
M_Na_pred_svmPoly = case_when(
M_Na_pred_svmPoly == "yes" ~ 1,
TRUE ~ 0
))
data_test_pred<- data_test_pred %>%
select(PubChemCID, M_Na, M_Na_pred_svmLinear, M_Na_pred_svmPoly, M_Na_pred_RRF, M_Na_pred_ada, M_Na_pred_DT, M_Na_pred_knn, M_Na_pred_naive_bayes, everything())
ggplot(data = data_test_pred) +
geom_point(mapping = aes(x = M_Na,
y = M_Na_pred_ada),
size = 5,
alpha = 1/50) +
facet_wrap(~Lab) +
theme_bw()
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_svmPoly)
}
accuracy = data_test_pred %>%
group_by(Lab) %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
accuracy_svmLinear = mean(M_Na == M_Na_pred_svmLinear),
accuracy_svmPoly = mean(M_Na == M_Na_pred_svmPoly),
accuracy_RRF = mean(M_Na == M_Na_pred_RRF),
accuracy_ada = mean(M_Na == M_Na_pred_ada),
accuracy_DT = mean(M_Na == M_Na_pred_DT),
accuracy_knn = mean(M_Na == M_Na_pred_knn),
accuracy_naive_bayes = mean(M_Na == M_Na_pred_naive_bayes)) %>%
ungroup() %>%
bind_rows(data_test_pred %>%
group_by() %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
accuracy_svmLinear = mean(M_Na == M_Na_pred_svmLinear),
accuracy_svmPoly = mean(M_Na == M_Na_pred_svmPoly),
accuracy_RRF = mean(M_Na == M_Na_pred_RRF),
accuracy_ada = mean(M_Na == M_Na_pred_ada),
accuracy_DT = mean(M_Na == M_Na_pred_DT),
accuracy_knn = mean(M_Na == M_Na_pred_knn),
accuracy_naive_bayes = mean(M_Na == M_Na_pred_naive_bayes)) %>%
ungroup())
data_test_pred2 = data_test_pred %>%
mutate(M_Na = case_when(
M_Na == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_svmLinear = case_when(
M_Na_pred_svmLinear == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_svmPoly = case_when(
M_Na_pred_svmPoly == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_RRF = case_when(
M_Na_pred_RRF == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_ada = case_when(
M_Na_pred_ada == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_DT = case_when(
M_Na_pred_DT == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_knn = case_when(
M_Na_pred_knn == 1 ~ 0,
TRUE ~ 1),
M_Na_pred_naive_bayes = case_when(
M_Na_pred_naive_bayes == 1 ~ 0,
TRUE ~ 1),)
F1_scores = data_test_pred2 %>%
group_by(Lab) %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
F1_svmLinear = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_svmLinear),
F1_svmPoly = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_svmPoly),
F1_RRF = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_RRF),
F1_ada = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_ada),
F1_DT = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_DT),
F1_knn = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_knn),
F1_naive_bayes = MLmetrics::F1_Score(y_true = M_Na, y_pred = M_Na_pred_naive_bayes)) %>%
ungroup() %>%
bind_rows(data_test_pred2 %>%
group_by() %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
F1_svmLinear = MLmetrics::F1_Score(M_Na, M_Na_pred_svmLinear),
F1_svmPoly = MLmetrics::F1_Score(M_Na, M_Na_pred_svmPoly),
F1_RRF = MLmetrics::F1_Score(M_Na, M_Na_pred_RRF),
F1_ada = MLmetrics::F1_Score(M_Na, M_Na_pred_ada),
F1_DT = MLmetrics::F1_Score(M_Na, M_Na_pred_DT),
F1_knn = MLmetrics::F1_Score(M_Na, M_Na_pred_knn),
F1_naive_bayes = MLmetrics::F1_Score(M_Na, M_Na_pred_naive_bayes)) %>%
ungroup())
Matthews = data_test_pred2 %>%
group_by(Lab) %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
Matthews_svmLinear = mccr::mccr(M_Na, M_Na_pred_svmLinear),
Matthews_svmPoly = mccr::mccr(M_Na, M_Na_pred_svmPoly),
Matthews_RRF = mccr::mccr(M_Na, M_Na_pred_RRF),
Matthews_ada = mccr::mccr(M_Na, M_Na_pred_ada),
Matthews_DT = mccr::mccr(M_Na, M_Na_pred_DT),
Matthews_knn = mccr::mccr(M_Na, M_Na_pred_knn),
Matthews_naive_bayes = mccr::mccr(M_Na, M_Na_pred_naive_bayes)) %>%
ungroup() %>%
bind_rows(data_test_pred2 %>%
group_by() %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
Matthews_svmLinear = mccr::mccr(M_Na, M_Na_pred_svmLinear),
Matthews_svmPoly = mccr::mccr(M_Na, M_Na_pred_svmPoly),
Matthews_RRF = mccr::mccr(M_Na, M_Na_pred_RRF),
Matthews_ada = mccr::mccr(M_Na, M_Na_pred_ada),
Matthews_DT = mccr::mccr(M_Na, M_Na_pred_DT),
Matthews_knn = mccr::mccr(M_Na, M_Na_pred_knn),
Matthews_naive_bayes = mccr::mccr(M_Na, M_Na_pred_naive_bayes)) %>%
ungroup())
Recall = data_test_pred2 %>%
group_by(Lab) %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
recall_svmLinear = caret::recall(factor(M_Na_pred_svmLinear), factor(M_Na)),
recall_svmPoly = caret::recall(factor(M_Na_pred_svmPoly), factor(M_Na)),
recall_RRF = caret::recall(factor(M_Na_pred_RRF), factor(M_Na)),
recall_ada = caret::recall(factor(M_Na_pred_ada), factor(M_Na)),
recall_DT = caret::recall(factor(M_Na_pred_DT), factor(M_Na)),
recall_knn = caret::recall(factor(M_Na_pred_knn), factor(M_Na)),
recall_naive_bayes = caret::recall(factor(M_Na_pred_naive_bayes), factor(M_Na))) %>%
ungroup() %>%
bind_rows(data_test_pred2 %>%
group_by() %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
recall_svmLinear = caret::recall(factor(M_Na_pred_svmLinear), factor(M_Na)),
recall_svmPoly = caret::recall(factor(M_Na_pred_svmPoly), factor(M_Na)),
recall_RRF = caret::recall(factor(M_Na_pred_RRF), factor(M_Na)),
recall_ada = caret::recall(factor(M_Na_pred_ada), factor(M_Na)),
recall_DT = caret::recall(factor(M_Na_pred_DT), factor(M_Na)),
recall_knn = caret::recall(factor(M_Na_pred_knn), factor(M_Na)),
recall_naive_bayes = caret::recall(factor(M_Na_pred_naive_bayes), factor(M_Na))) %>%
ungroup() )
Precision = data_test_pred2 %>%
group_by(Lab) %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
precision_svmLinear = caret::precision(factor(M_Na_pred_svmLinear), factor(M_Na)),
precision_svmPoly = caret::precision(factor(M_Na_pred_svmPoly), factor(M_Na)),
precision_RRF = caret::precision(factor(M_Na_pred_RRF), factor(M_Na)),
precision_ada = caret::precision(factor(M_Na_pred_ada), factor(M_Na)),
precision_DT = caret::precision(factor(M_Na_pred_DT), factor(M_Na)),
precision_knn = caret::precision(factor(M_Na_pred_knn), factor(M_Na)),
precision_naive_bayes = caret::precision(factor(M_Na_pred_naive_bayes), factor(M_Na))) %>%
ungroup() %>%
bind_rows(data_test_pred2 %>%
group_by() %>%
summarise(count_pos = sum(M_Na),
count_neg = n() - sum(M_Na),
precision_svmLinear = caret::precision(factor(M_Na_pred_svmLinear), factor(M_Na)),
precision_svmPoly = caret::precision(factor(M_Na_pred_svmPoly), factor(M_Na)),
precision_RRF = caret::precision(factor(M_Na_pred_RRF), factor(M_Na)),
precision_ada = caret::precision(factor(M_Na_pred_ada), factor(M_Na)),
precision_DT = caret::precision(factor(M_Na_pred_DT), factor(M_Na)),
precision_knn = caret::precision(factor(M_Na_pred_knn), factor(M_Na)),
precision_naive_bayes = caret::precision(factor(M_Na_pred_naive_bayes), factor(M_Na))) %>%
ungroup())
write_delim(accuracy,
"accuracy_test_set.csv",
delim = ",")
write_delim(F1_scores,
"F1_score_test_set.csv",
delim = ",")
write_delim(Matthews,
"Matthews_correlation_test_set.csv",
delim = ",")
write_delim(Recall,
"Recall_test_set.csv",
delim = ",")
write_delim(Precision,
"Precision_test_set.csv",
delim = ",")
View(accuracy)
View(F1_scores)
View(Matthews)
View(Recall)
View(Precision)
classifier_svmpoly$finalModel
saveRDS(classifier_svmlinear,
file = "classifier_svmlinear.rds")
#true positive and false positive rate analysis
data_pred2 = data
data_pred2 = data_pred2 %>%
mutate(M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_pred2, type = "prob")[,2])
data_pred2 = data_pred2 %>%
select(PubChemCID, Lab, M_Na, M_Na_pred_svmPoly)
library(ROCR)
pred <- prediction(data_pred2$M_Na_pred_svmPoly, data_pred2$M_Na)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
summary <- tibble(Cutoff = pred@cutoffs[[1]],
TruePositives = pred@tp[[1]],
FalsePositives = pred@fp[[1]],
TrueNegatives = pred@tn[[1]],
FalseNegatives = pred@fn[[1]]) %>%
mutate(Cutoff = case_when(
Cutoff == "Inf" ~ 1,
TRUE ~ Cutoff
)) %>%
add_row(Cutoff = 0,
TruePositives = sum(data_pred2$M_Na == 1),
FalsePositives = sum(data_pred2$M_Na != 1),
TrueNegatives = 0,
FalseNegatives = 0)
summary <- summary %>%
mutate(TruePositiveRate = TruePositives / (TruePositives + FalseNegatives),
FalsePositiveRate = FalsePositives / (FalsePositives + TrueNegatives ))
cutoff_plot =
ggplot(data = summary) +
geom_line(mapping = aes(x = FalsePositiveRate,
y = TruePositiveRate,
text = Cutoff),
color = basecolor) +
my_theme
plotly::ggplotly(cutoff_plot)
cutoff_plot
ggsave("TPR_FPR.svg",
width = 8,
height = 8,
units = "cm")
View(data_test)
View(data)
View(data_train)
#true positive and false positive rate analysis
data_pred2 = data %>%
anti_join(data_train)
#true positive and false positive rate analysis
data_pred2 = data %>%
anti_join(data_train, by = "PubChemCID")
data_pred2 = data_pred2 %>%
mutate(M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_pred2, type = "prob")[,2])
#true positive and false positive rate analysis
data_pred2 = data %>%
anti_join(data_train, by = "PubChemCID") %>%
na.omit()
data_pred2 = data_pred2 %>%
mutate(M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_pred2, type = "prob")[,2])
View(data)
View(data_all)
View(data_test)
#true positive and false positive rate analysis
data_pred2 = data_test %>%
select(PubChemCID, M_Na, Lab) %>%
left_join(fingerprints) %>%
na.omit()
data_pred2 = data_pred2 %>%
mutate(M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_pred2, type = "prob")[,2])
data_pred2 = data_pred2 %>%
select(PubChemCID, Lab, M_Na, M_Na_pred_svmPoly)
library(ROCR)
pred <- prediction(data_pred2$M_Na_pred_svmPoly, data_pred2$M_Na)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
summary <- tibble(Cutoff = pred@cutoffs[[1]],
TruePositives = pred@tp[[1]],
FalsePositives = pred@fp[[1]],
TrueNegatives = pred@tn[[1]],
FalseNegatives = pred@fn[[1]]) %>%
mutate(Cutoff = case_when(
Cutoff == "Inf" ~ 1,
TRUE ~ Cutoff
)) %>%
add_row(Cutoff = 0,
TruePositives = sum(data_pred2$M_Na == 1),
FalsePositives = sum(data_pred2$M_Na != 1),
TrueNegatives = 0,
FalseNegatives = 0)
summary <- summary %>%
mutate(TruePositiveRate = TruePositives / (TruePositives + FalseNegatives),
FalsePositiveRate = FalsePositives / (FalsePositives + TrueNegatives ))
cutoff_plot =
ggplot(data = summary) +
geom_line(mapping = aes(x = FalsePositiveRate,
y = TruePositiveRate,
text = Cutoff),
color = basecolor) +
my_theme
plotly::ggplotly(cutoff_plot)
cutoff_plot
View(summary)
ggsave("TPR_FPR.svg",
width = 8,
height = 8,
units = "cm")
summary <- summary %>%
mutate(cost_pos = 1*FalsePositives + FalseNegatives,
cost_neg = FalsePositives + 3*FalseNegatives)
ggplot(data = summary ) +
geom_line(mapping = aes(x = FalsePositiveRate,
y = TruePositiveRate))+
geom_point(data = summary %>% slice(which.min(cost_pos)),
mapping = aes(x = FalsePositiveRate,
y = TruePositiveRate),
size = 3,
color = "red") +
geom_point(data = summary %>% slice(which.min(cost_neg)),
mapping = aes(x = FalsePositiveRate,
y = TruePositiveRate),
size = 3,
color = "blue")
View(data_all)
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/adduct_formation/data/validation")
validation = read_delim("ac8b04567_si_002_CID.csv",
delim = ",",
col_names = TRUE)
validation = validation %>%
spread(key = Adduct, value = CCS)
validation = validation %>%
mutate(M_Na = case_when(
is.na(`[M+Na]`) ~ 0,
TRUE ~ 1
)) %>%
select(Name, M_Na, PubChemCID, ExactMass)
validation_fingerprints = read_delim("PubChem_fingerprints_bond_properties_validation.csv",
delim = ",",
col_names = TRUE)
validation = validation %>%
left_join(validation_fingerprints) %>%
na.omit()
validation = validation %>%
mutate(M_Na_pred_prob = predict(classifier_svmpoly, newdata = validation, type = "prob")[,2]) %>%
mutate(M_Na_pred = case_when(
M_Na_pred_prob > 0.500 ~ 1,
TRUE ~ 0
))
ggplot(data = validation) +
geom_point(mapping = aes(x = M_Na,
y = M_Na_pred_prob),
size = 5,
alpha = 1/20) +
my_theme
val_plot =
ggplot(data = validation %>%
group_by(ExactMass) %>%
mutate(count = n(),
prob_dif = max(M_Na_pred_prob) -min(M_Na_pred_prob)) %>%
ungroup() %>%
filter(count > 1 & prob_dif > 0.1)) +
geom_point(mapping = aes(x = ExactMass,
y = M_Na_pred_prob,
text = Name,
color = M_Na),
size = 2) +
geom_abline(slope = 0, intercept = 0.500) +
my_theme
plotly::ggplotly(val_plot)
mean(validation$M_Na == validation$M_Na_pred)
#75.7%
CrossTable(validation$M_Na, validation$M_Na_pred)
validation2 = validation %>%
mutate(M_Na = case_when(
M_Na == 1 ~ 0,
TRUE ~ 1),
M_Na_pred = case_when(
M_Na_pred == 1 ~ 0,
TRUE ~ 1))
caret::precision(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#0.826
caret::recall(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#0.824
MLmetrics::F1_Score(y_true = validation2$M_Na, y_pred = validation2$M_Na_pred)
#82.5%
library(mccr)
mccr::mccr(validation2$M_Na_pred, validation2$M_Na)
validation = validation %>%
mutate(M_Na_pred_prob = predict(classifier_svmpoly, newdata = validation, type = "prob")[,2]) %>%
mutate(M_Na_pred = case_when(
M_Na_pred_prob > 0.63 ~ 1,
TRUE ~ 0
))
ggplot(data = validation) +
geom_point(mapping = aes(x = M_Na,
y = M_Na_pred_prob),
size = 5,
alpha = 1/20) +
my_theme
val_plot =
ggplot(data = validation %>%
group_by(ExactMass) %>%
mutate(count = n(),
prob_dif = max(M_Na_pred_prob) -min(M_Na_pred_prob)) %>%
ungroup() %>%
filter(count > 1 & prob_dif > 0.1)) +
geom_point(mapping = aes(x = ExactMass,
y = M_Na_pred_prob,
text = Name,
color = M_Na),
size = 2) +
geom_abline(slope = 0, intercept = 0.500) +
my_theme
plotly::ggplotly(val_plot)
mean(validation$M_Na == validation$M_Na_pred)
#75.7%
CrossTable(validation$M_Na, validation$M_Na_pred)
#false positive 0.397
69/174
#false neg 0.176
70/398
validation2 = validation %>%
mutate(M_Na = case_when(
M_Na == 1 ~ 0,
TRUE ~ 1),
M_Na_pred = case_when(
M_Na_pred == 1 ~ 0,
TRUE ~ 1))
caret::precision(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#0.826
caret::recall(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#0.824
MLmetrics::F1_Score(y_true = validation2$M_Na, y_pred = validation2$M_Na_pred)
#82.5%
library(mccr)
mccr::mccr(validation2$M_Na_pred, validation2$M_Na)
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/adduct_formation/data/validation")
validation = read_delim("ac8b04567_si_002_CID.csv",
delim = ",",
col_names = TRUE)
validation = validation %>%
spread(key = Adduct, value = CCS)
validation = validation %>%
mutate(M_Na = case_when(
is.na(`[M+Na]`) ~ 0,
TRUE ~ 1
)) %>%
select(Name, M_Na, PubChemCID, ExactMass)
validation_fingerprints = read_delim("PubChem_fingerprints_bond_properties_validation.csv",
delim = ",",
col_names = TRUE)
validation = validation %>%
left_join(validation_fingerprints) %>%
na.omit()
validation = validation %>%
mutate(M_Na_pred_prob = predict(classifier_svmpoly, newdata = validation, type = "prob")[,2]) %>%
mutate(M_Na_pred = case_when(
M_Na_pred_prob > 0.5 ~ 1,
TRUE ~ 0
))
ggplot(data = validation) +
geom_point(mapping = aes(x = M_Na,
y = M_Na_pred_prob),
size = 5,
alpha = 1/20) +
my_theme
val_plot =
ggplot(data = validation %>%
group_by(ExactMass) %>%
mutate(count = n(),
prob_dif = max(M_Na_pred_prob) -min(M_Na_pred_prob)) %>%
ungroup() %>%
filter(count > 1 & prob_dif > 0.1)) +
geom_point(mapping = aes(x = ExactMass,
y = M_Na_pred_prob,
text = Name,
color = M_Na),
size = 2) +
geom_abline(slope = 0, intercept = 0.500) +
my_theme
plotly::ggplotly(val_plot)
mean(validation$M_Na == validation$M_Na_pred)
#74.7%
CrossTable(validation$M_Na, validation$M_Na_pred)
#false positive 0.397
79/174
#false neg 0.176
66/398
validation2 = validation %>%
mutate(M_Na = case_when(
M_Na == 1 ~ 0,
TRUE ~ 1),
M_Na_pred = case_when(
M_Na_pred == 1 ~ 0,
TRUE ~ 1))
caret::precision(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#0.826
caret::recall(factor(validation2$M_Na_pred), factor(validation2$M_Na))
#83.4%
library(mccr)
#0.834
MLmetrics::F1_Score(y_true = validation2$M_Na, y_pred = validation2$M_Na_pred)
#82.1%
library(mccr)
mccr::mccr(validation2$M_Na_pred, validation2$M_Na)
