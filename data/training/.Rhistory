BiocManager::install("CAMERA")
# needed for RAMClustR for componentization
remotes::install_github("cbroeckl/RAMClustR")
# only needed for Bruker DataAnalysis integration
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
# only when using the R interface (not recommended by default)
remotes::install_github("c-ruttkies/MetFragR/metfRag")
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/sirius-win64-3.5.1") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "/usr/local/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "~/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "~/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "~/PubChemLite_14Jan2020_tier0.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.0.0") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
# optional, data for tutorial
install.packages("patRoonData", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
# optional, data for tutorial
install.packages("patRoonData", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64/sirius-win64-4.4.29") # location where SIRIUS was extracted
patRoon::verifyDependencies()
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/Sirius/sirius-4.4.29-win64/sirius-win64-4.4.29") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
options(patRoon.path.pwiz = "C:/ProteoWizard") # location of ProteoWizard installation folder
options(patRoon.path.SIRIUS = "C:/Program Files/sirius-gui") # location where SIRIUS was extracted
options(patRoon.path.OpenMS = "C:/Program Files/OpenMS-2.6.0/bin") # directory with the OpenMS binaries
options(patRoon.path.pngquant = "C:/Users/annel/Downloads/pngquant-windows/pngquant") # directory containing pngquant binary
options(patRoon.path.MetFragCL = "C:/Users/annel/Downloads/MetFrag2.4.5-CL.jar") # full location to the jar file
options(patRoon.path.MetFragCompTox = "C:/Users/annel/Downloads/CompTox_17March2019_SelectMetaData.csv") # full location to desired CompTox CSV file
options(patRoon.path.MetFragPubChemLite = "C:/Users/annel/Downloads/PubChemLite_31Oct2020_exposomics.csv") # full location to desired PubChemLite CSV file
options(patRoon.path.obabel = "C:/Program Files/OpenBabel-3.1.1") # directory with OpenBabel binaries
# install from patRoonDeps (only Windows with latest R version)
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
install.packages("patRoon", repos = "https://rickhelmus.github.io/patRoonDeps/", type = "binary")
patRoon::verifyDependencies()
library(patRoon)
a = 1:20
rev.default(a)
a = 20:1
20 %% 2
rm(1:4)
remove(1:4)
within(a, rm(3))
within(a, 3
)
a[c(2)] <- NULL
a[c(2,3)] <- NULL
a[-c(2,3)]
install.packages("rlist")
remove(a, 2)
list.remove(a, 2)
library(tidyverse)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(COC-1~[#8])C-1'
matches(query, mols)
install.packages("lsa")
a = c(1, 0, 0, 1)
b = c(1, 0, 1, 0)
lsa::cosine(a, b)
b = c(1, 0, 1, 0, 0)
a = c(1, 0, 0, 1, 0)
b = c(1, 0, 1, 0, 0)
lsa::cosine(a, b)
a = c(1, 0, 0, 1, 1)
b = c(1, 0, 1, 0, 0)
lsa::cosine(a, b)
library(tidyverse)
tibble(bind_rows(a, b))
bind_rows(a, b)
SMILES = "Clc1ccc(c(Cl)c1)C(OCC=C)Cn2ccnc2"
ion = "[M+H]+"
command_part1 = "docker run --rm=true -v "
check0 = '"'
check = "%"
command_part12 = "cd"
check2 = "%"
command_part13 = ":/cfmid/public/\" -i wishartlab/cfmid:latest sh -c \"cd /cfmid/public/; cfm-predict \'"
command_part2 = "\' 0.001 /trained_models_cfmid4.0/[M+H]+/param_output.log /trained_models_cfmid4.0/"
command_part3 = "/param_config.txt 1 "
command_part4 = ".txt\""
command_final = str_c(command_part1, check0, check, command_part12, check2, command_part13, SMILES, command_part2, ion, command_part3, "test", command_part4)
library(tidyverse)
command_final = str_c(command_part1, check0, check, command_part12, check2, command_part13, SMILES, command_part2, ion, command_part3, "test", command_part4)
command_final
writeLines(c("Hello","World"), fileConn)
writeLines(c("Hello","World")
)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'OH'
matches(query, mols)
query <- '(O)'
matches(query, mols)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '(O)'
matches(query, mols)
query <- '[OH]'
matches(query, mols)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
library(tidyverse)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
View(test_data)
test_data = test_data %>%
mutate(mols <- parse.smiles(SMILES))
View(test_data)
test_data = test_data %>%
mutate(mols <- parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = test_data %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = matches(query, mols)) %>%
ungroup()
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES) %>%
ungroup()
,
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES) %>%
ungroup()
includes_OH = matches(query, mols))
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES)) %>%
ungroup()
includes_OH = matches(query, test_data$mols))
includes_OH = matches(query, test_data$mols)
test_data$mols
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
mols
matches(query, mols)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
matches(query, mols)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(=O)O'
matches(query, mols)
rcdk::matches(query, mols)
library(rcdk)
mols <- parse.smiles(c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC'))
query <- 'C(=O)O'
rcdk::matches(query, mols)
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = rcdk::matches(query, mols)) %>%
ungroup()
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
group_by(SMILES) %>%
mutate(mols = parse.smiles(SMILES),
includes_OH = rcdk::matches(query, mols)) %>%
ungroup()
View(test_data)
library(rcdk)
library(tidyverse)
test_data = tibble('SMILES' = c('CC(C)(C)C','c1ccc(Cl)cc1C(=O)O', 'CCC(N)(N)CC', 'OS(=O)(=O)c1ccccc1', 'CC(=O)C'))
query <- '[OH]'
test_data = test_data %>%
group_by(SMILES) %>%
mutate(includes_OH = rcdk::matches(query, parse.smiles(SMILES))) %>%
ungroup()
View(test_data)
library(tidyverse)
library(caret)
library(gmodels)
library(caTools)
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/adduct_formation/code")
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/GitHub/adduct_formation/data/training")
#Adduct data ----
#UT data-----
UT_data = read_delim("UT_adducts_CID.csv",
delim = ",",
col_names = TRUE) %>%
na.omit()
UT_data = UT_data %>%
mutate(M_H = case_when(
Class == 0 ~ 1,
Class == 2 ~ 1,
TRUE ~ 0
),
M_Na = case_when(
Class == 1 ~ 1,
Class == 2 ~ 1,
TRUE ~ 0
),
Lab = "UT")
UT_data  %>%
group_by(M_Na) %>%
summarise(n())
set.seed(123)
#there are about 2x so (224 vs 127) many compounds not forming an adduct as there are ones forming an adduct
UT_data_adduct = sample_n(UT_data %>%
filter(M_Na == 1),
size = 100,
replace = FALSE)
UT_data_No_adduct = sample_n(UT_data %>%
filter(M_Na == 0),
size = 100,
replace = FALSE)
UT_data_balanced = UT_data_adduct %>%
bind_rows(UT_data_No_adduct)
Corey_data = read_delim("Corey_adducts_CID.csv",
delim = ",",
col_names = TRUE)
Corey_data = Corey_data %>%
mutate(M_Na = case_when(
Class == 1 ~ 1,
Class == 2 ~ 1,
TRUE ~ 0),
Lab = "Corey")
Corey_data  %>%
group_by(M_Na) %>%
summarise(n())
#there are about 6x so (72 vs 525) many compounds forming an adduct as there are ones forming an adduct
Corey_data_No_adduct = sample_n(Corey_data %>%
filter(M_Na == 0),
size = 100,
replace = TRUE)
Corey_data_adduct = sample_n(Corey_data %>%
filter(M_Na == 1),
size = 100,
replace = FALSE)
Corey_data_balanced = Corey_data_adduct %>%
bind_rows(Corey_data_No_adduct)
SU_data = read_delim("SU_adducts_CID.csv",
delim = ",",
col_names = TRUE)
SU_data = SU_data %>%
mutate(M_Na = case_when(
SlopeNa == 0 ~ 0,
TRUE ~ 1),
M_H = case_when(
SlopeH == 0 ~ 0,
TRUE ~ 1),
Lab = "SU")
SU_data  %>%
group_by(M_Na, M_H) %>%
summarise(n())
SU_data_adduct = sample_n(SU_data %>%
filter(M_Na == 1),
size = 50,
replace = TRUE)
SU_data_No_adduct = sample_n(SU_data %>%
filter(M_Na == 0),
size = 50,
replace = TRUE)
SU_data_balanced = SU_data_adduct %>%
bind_rows(SU_data_No_adduct)
Celma_data = read_delim("Celma_adduct_CID.csv",
delim = ",",
col_names = TRUE)
Celma_data  %>%
group_by(M_Na) %>%
summarise(n())
Celma_data_adduct = sample_n(Celma_data %>%
filter(M_Na == 1),
size = 200,
replace = FALSE)
Celma_data_No_adduct = sample_n(Celma_data %>%
filter(M_Na == 0),
size = 200,
replace = FALSE)
Celma_data_balanced = Celma_data_adduct %>%
bind_rows(Celma_data_No_adduct)
Picache_data = read_delim("Picache_adducts_CID.csv",
delim = ",",
col_names = TRUE)
Picache_data = Picache_data %>%
filter(Adduct == "[M+Na]" | Adduct == "[M+H]") %>%
select(PubChemCID, Adduct, CCS) %>%
na.omit() %>%
group_by(PubChemCID, Adduct) %>%
summarise(CCS = mean(CCS)) %>%
ungroup()
Picache_data = Picache_data %>%
spread(key = Adduct, value = CCS)
Picache_data = Picache_data %>%
mutate(M_Na = case_when(
is.na(`[M+Na]`) ~ 0,
TRUE ~ 1
))
Picache_data = Picache_data %>%
select(PubChemCID, M_Na) %>%
mutate(Lab = "Picache")
Picache_data  %>%
group_by(M_Na) %>%
summarise(n())
Picache_data_adduct = sample_n(Picache_data %>%
filter(M_Na == 1),
size = 100,
replace = FALSE)
Picache_data_No_adduct = sample_n(Picache_data %>%
filter(M_Na == 0),
size = 100,
replace = FALSE)
Picache_data_balanced = Picache_data_adduct %>%
bind_rows(Picache_data_No_adduct)
data_all = UT_data %>%
bind_rows(Corey_data) %>%
bind_rows(SU_data) %>%
bind_rows(Celma_data) %>%
bind_rows(Picache_data)
data = UT_data_balanced %>%
bind_rows(Corey_data_balanced) %>%
bind_rows(SU_data_balanced) %>%
bind_rows(Celma_data_balanced) %>%
bind_rows(Picache_data_balanced) %>%
select(-Name, -Class, -M_H, -SlopeH, -SlopeNa)
data_test = data_all %>%
anti_join(data)
fingerprints <- read_delim("PubChem_fingerprints_Bond_properties.csv",
delim = ",",
col_names = TRUE) %>%
select(-SMILES, -X1, -SDFlineStart, -SDFlineEnd, -SDFID, -Fingerprint) %>%
select(everything(), PubChemCID)
fingerprints <- fingerprints %>%
select(-caret::nearZeroVar(fingerprints)) #removing fingerprints that do not change significantely between samples
fingerprints_with_NA <- fingerprints %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
fingerprints <- fingerprints %>%
na.omit() %>%
unique()
#Putting adduct data and fingerprints together----
data <- data %>%
na.omit() %>%
left_join(fingerprints)%>%
na.omit()
data = read_delim("balanced_adduct_data_training.csv",
delim = ",",
col_names = TRUE)
compounds = data %>%
select(PubChemCID) %>%
unique()
set.seed(987123)
data_train = data %>%
mutate(M_Na = case_when(
M_Na == 1 ~ "yes",
TRUE ~ "no"
)) %>%
mutate(M_Na = factor(M_Na,
levels = c("no", "yes")))
#it turns out that for some labs there are still features with zero variance in and these need to be removed
data_train = data_train %>%
select(-PubChemCID, -Lab, -M_Na, everything())
for (lab in levels(as.factor(data_train$Lab))) {
data_train <- data_train %>%
select(-caret::nearZeroVar(data_train %>%
filter(Lab == lab) %>%
select(-PubChemCID, -Lab, -M_Na)))
}
classifier_svmpoly = readRDS("classifier_svmpoly.rds")
classifier_svmlinear = readRDS("classifier_svmlinear.rds")
classifier_RRF = readRDS("classifier_RRF.rds")
classifier_ada = readRDS("classifier_ada.rds")
classifier_DT = readRDS("classifier_DT.rds")
classifier_knn = readRDS("classifier_knn.rds")
classifier_naive_bayes = readRDS("classifier_naive_bayes.rds")
data_train_pred <- data %>%
mutate(M_Na_pred_svmLinear = predict(classifier_svmlinear, newdata = data),
M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data),
M_Na_pred_RRF = predict(classifier_RRF, newdata = data),
M_Na_pred_ada = predict(classifier_ada, newdata = data),
M_Na_pred_DT = predict(classifier_DT, newdata = data),
M_Na_pred_knn = predict(classifier_knn, newdata = data),
M_Na_pred_naive_bayes = predict(classifier_naive_bayes, newdata = data))
data_train_pred = data_train_pred %>%
mutate(M_Na_pred_svmLinear = case_when(
M_Na_pred_svmLinear == "yes" ~ 1,
TRUE ~ 0
),
M_Na_pred_svmPoly = case_when(
M_Na_pred_svmPoly == "yes" ~ 1,
TRUE ~ 0
))
data_test_pred <- data_test %>%
select(PubChemCID, Lab, M_Na) %>%
unique() %>%
left_join(fingerprints) %>%
na.omit() %>%
unique()
data_test_pred <- data_test_pred %>%
mutate(M_Na_pred_svmLinear = predict(classifier_svmlinear, newdata = data_test_pred),
M_Na_pred_svmPoly = predict(classifier_svmpoly, newdata = data_test_pred),
M_Na_pred_RRF = predict(classifier_RRF, newdata = data_test_pred),
M_Na_pred_ada = predict(classifier_ada, newdata = data_test_pred),
M_Na_pred_DT = predict(classifier_DT, newdata = data_test_pred),
M_Na_pred_knn = predict(classifier_knn, newdata = data_test_pred),
M_Na_pred_naive_bayes = predict(classifier_naive_bayes, newdata = data_test_pred))
data_test_pred = data_test_pred %>%
mutate(M_Na_pred_svmLinear = case_when(
M_Na_pred_svmLinear == "yes" ~ 1,
TRUE ~ 0
),
M_Na_pred_svmPoly = case_when(
M_Na_pred_svmPoly == "yes" ~ 1,
TRUE ~ 0
))
data_test_pred<- data_test_pred %>%
select(PubChemCID, M_Na, M_Na_pred_svmLinear, M_Na_pred_svmPoly, M_Na_pred_RRF, M_Na_pred_ada, M_Na_pred_DT, M_Na_pred_knn, M_Na_pred_naive_bayes, everything())
```{r setup, include=FALSE}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_naive_bayes)
for (lab in levels(factor(data_test_pred$Lab))) {
write_delim(data_test_pred,
"Predicted_adduct_formation_test_set.csv",
sep = ",")
write_delim(data_test_pred,
"Predicted_adduct_formation_test_set.csv",
delim = ",")
write_delim(data_train_pred,
"Predicted_adduct_formation_training_set.csv",
delim = ",")
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/GitHub/adduct_formation/data/training")
Cross
data_test_pred = read_delim("Predicted_adduct_formation_test_set.csv",
delim = ",")
setwd("C:/Users/annel/OneDrive - Kruvelab/Kruvelab/computational/IE mudeli script ja failid/GitHub/adduct_formation/data/training")
data_test_pred = read_delim("Predicted_adduct_formation_test_set.csv",
delim = ",")
View(data_test_pred)
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_svmLinear)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_svmLinear)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_svmPoly)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_svmPoly)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_RRF)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_RRF)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_ada)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_ada)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_DT)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_DT)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_knn)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_knn)
}
CrossTable(data_test_pred$M_Na, data_test_pred$M_Na_pred_naive_bayes)
for (lab in levels(factor(data_test_pred$Lab))) {
this_lab = data_test_pred %>%
filter(Lab == lab)
print(lab)
CrossTable(this_lab$M_Na, this_lab$M_Na_pred_naive_bayes)
}
